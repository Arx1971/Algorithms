#include <iostream>
#include <cmath>
#include <stack>
#include <vector>
#include <cstdlib>
#include <cstdio>
using namespace std;

vector < int > graph[100];
bool visited [1000];
int edge_id[1000];
int parent[1000];

void dfs(int src,int node){
	
	for(int i=0; i<=node; i++){
		
		visited[i] = false;
		edge_id[i] = 0;
	
	}
	
	stack < int > s;
	s.push(src);
	
	while(!s.empty()){
		
		int u = s.top();
		s.pop();
		
		while(edge_id[u]<graph[u].size()){
			int v = graph[u][edge_id[u]];
			edge_id[u]++;
			
			if(visited[v] == false){
				visited[v] = true;
				s.push(u);
				s.push(v);
				parent[v] = u;
				break;
			}
		}
	
	}
	
}
void printPath(int src, int dest)
{
    if(dest == src)
    {
        cout << dest;
        return;
    }

    printPath(src, parent[dest]);
    cout << " -> " << dest;
}
int main(){
	
	freopen("input.txt", "r", stdin);
	
	int edge,node;
	int x,y;
	cin >> node;
	
	for(int i=1; i<=node; i++){
		
		cin >> edge;	// number of edge;
		graph[i].resize(edge);
		
		for(int j=0; j<edge; j++)
			cin >> graph[i][j];
			
	}
	dfs(1,node);
	printPath(3,node);
	return 0;
}
